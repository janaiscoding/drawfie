#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("drawfie-backend:server");
var http = require("http");
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"],
  },
});

const users = [
  {
    id: "123",
    name: "Dummy user",
    isReady: true,
  },
];
const guesses = [];

io.on("connection", (socket) => {
  console.log("A user connected emit user connected: " + socket.id);

  users.push({ id: socket.id, isReady: false, name: "" });

  console.log("Updated users list:", users);
  io.emit("updateUsers", users);

  socket.on("draw", (data) => {
    io.emit("draw", data);
  });

  socket.on("disconnect", () => {
    const idx = users.findIndex((user) => user.id === socket.id);
    if (idx !== -1) {
      users.splice(idx, 1); // Correctly remove user from array
    }
    console.log("User disconnected and update users: " + socket.id);
    io.emit("updateUsers", users);
  });

  socket.on("setReady", (isReady) => {
    const currentUser = users.find((u) => u.id === socket.id);
    currentUser.isReady = isReady;
    io.emit("updateUsers", users);

    // Check if all users are ready
    if (Object.values(users).every((user) => user.isReady)) {
      io.emit("canStartGame", true);
    } else {
      io.emit("canStartGame", false);
    }
  });

  socket.on("addGuess", (guess) => {
    console.log("addGuess", guess);
    guesses.push({
      id: socket.id,
      guess,
    });

    io.emit("updateGuesses", guesses);
  });

  socket.on("stopGame", () => {
    users = [];
    guesses = [];
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
